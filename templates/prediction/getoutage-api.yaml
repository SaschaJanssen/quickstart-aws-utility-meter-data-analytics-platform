AWSTemplateFormatVersion: "2010-09-09"
Description: "Create lambda function and API to get meter outage info"
Resources:
    GeoDataCrawler:
      Type: "AWS::Glue::Crawler"
      Properties:
          Role: !Sub "service-role/${CrawlerIAMRole}"
          Targets:
              S3Targets:
                  - Path: !Sub "s3://${SourceS3Bucket}/geodata"
          DatabaseName: !Ref DBName
          SchemaChangePolicy:
              UpdateBehavior: "LOG"
              DeleteBehavior: "DEPRECATE_IN_DATABASE"
    
    CrawlerIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
          Path: "/service-role/"
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: 'glue.amazonaws.com'
                Action: 'sts:AssumeRole'
          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
            - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"

    ExecuteLambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: 'lambda.amazonaws.com'
              Action: 'sts:AssumeRole'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
          - 'arn:aws:iam::aws:policy/AmazonSageMakerReadOnly'

    ApiGatewayRestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: !Sub 'outageApi-${AWS::Region}'
            Description: "Get outage info between a given date range"
            ApiKeySourceType: "HEADER"
            EndpointConfiguration: 
                Types: 
                  - "REGIONAL"

    ApiGatewayMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
            HttpMethod: "POST"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": !Ref ApiGatewayModel
                StatusCode: "200"
            Integration: 
                ContentHandling: "CONVERT_TO_TEXT"
                IntegrationHttpMethod: "POST"
                IntegrationResponses: 
                  - 
                    ResponseTemplates: {}
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                TimeoutInMillis: 29000
                Type: "AWS"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}/invocations"

    ApiGatewayModel:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Description: "This is a default empty schema model"
            Schema: |
                {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "title" : "Empty Schema",
                  "type" : "object"
                }
            ContentType: "application/json"

    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Sub "mdaGetOutageDetails-${AWS::Region}"
            Handler: "index.handler"
            Code: 
                S3Bucket: !Ref QSS3BucketName
                S3Key: !Sub '${QSS3KeyPrefix}assets/functions/packages/outage_info/lambda.zip'
            Environment:
              Variables:
                DB_NAME: !Ref DBName
            MemorySize: 128
            Role: !GetAtt 'ExecuteLambdaRole.Arn'
            Runtime: "nodejs12.x"
            Timeout: 30
            TracingConfig: 
                Mode: "PassThrough"

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"

Parameters:
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets.
      Only change this value if you customize or extend the Quick Start for your own use.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*[/]$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/) and must terminate in a forward slash.
    Default: quickstart-aws-utility-meter-data-analytics-platform/
    Type: String
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
  SourceS3Bucket:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Source S3 bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Description: >-
      S3 bucket name where the meter geolocation data is stored. NOTE: For crawler to
      work correctly, geolcation data should be at the following S3 path s3://<Bucketname>/geodata/
    Type: String
  DBName:
    Type: String
    Default: meter-data
    Description: Glue catalog database name